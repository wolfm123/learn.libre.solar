(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{420:function(t,e,a){"use strict";a.r(e);var r=a(0),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"tools-environment"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tools-environment"}},[t._v("#")]),t._v(" Tools & Environment")]),t._v(" "),a("p",[t._v("The "),a("strong",[t._v("Libre Solar project")]),t._v(" is taken as an example for explanation. All the files are open source and can be found on "),a("a",{attrs:{href:"https://github.com/LibreSolar",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub - LibreSolar"),a("OutboundLink")],1),t._v(". There is a separate repository for each PCB and an additional repository for the software.")]),t._v(" "),a("p",[t._v("Some of the repositories contain git submodules, so please use")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git clone --recursive <repository>\n")])])]),a("p",[t._v("instead of the "),a("strong",[t._v("download")]),t._v(" button on github.")]),t._v(" "),a("h2",{attrs:{id:"hardware-design"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hardware-design"}},[t._v("#")]),t._v(" Hardware design")]),t._v(" "),a("p",[t._v("Except for some old boards, all Libre Solar electronics hardware is built using the open source PCB design software "),a("a",{attrs:{href:"http://kicad-pcb.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("KiCad 5"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("p",[t._v("As KiCad version 5 contains lots of interesting new features (better rendering, rounded pads, STEP export and better symbol file format), the Libre Solar PCBs were recently converted to this version. Unfortunately, the files are not compatible with the older KiCad version 4 anymore. Please download the nightly builds or the stable KiCad version 5 as soon as it is released.")]),t._v(" "),a("p",[a("strong",[t._v("Custom footprints and symbols are saved in separate repositories")]),t._v(":")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/LibreSolar/KiCad-footprints",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/LibreSolar/KiCad-footprints"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/LibreSolar/KiCad-symbols",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/LibreSolar/KiCad-symbols"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("The footprint library is directly included via the github import feature in KiCad. This feature does not exist for the schematics editor, so the schematic symbols are included via a git submodule.")]),t._v(" "),a("h2",{attrs:{id:"software-development"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#software-development"}},[t._v("#")]),t._v(" Software development")]),t._v(" "),a("p",[t._v("The firmware for the Libre Solar hardware is developed using the "),a("a",{attrs:{href:"https://developer.mbed.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("ARM mbed OS"),a("OutboundLink")],1),t._v(" embedded software framework. This makes it possible to use easy-to-understand C++ syntax (similar to Arduino) and enhances community based software development.")]),t._v(" "),a("p",[a("strong",[t._v("Using Visual Studio Code and "),a("a",{attrs:{href:"http://platformio.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("PlatformIO"),a("OutboundLink")],1),t._v(" as an IDE for software development is recommended")]),t._v(".")]),t._v(" "),a("p",[t._v("All Libre Solar software repositories are structured as PlatformIO projects:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("|--lib/\n|  |--Foo\n|  |  |- Foo.cpp\n|  |  |- Foo.h\n|  |--Bar\n|  |  |- Bar.cpp\n|  |  |- Bar.h\n|--src/\n|  |- config.h\n|  |- main.cpp\n|- platformio.ini\n|- README.md\n|- LICENSE\n")])])]),a("p",[t._v("The main firmware is located in the "),a("code",[t._v("src")]),t._v(" folder, external libraries or reuseable code are stored under "),a("code",[t._v("lib")]),t._v(".")]),t._v(" "),a("p",[t._v("The platformio.ini file contains some important settings which might have to be adjusted:")]),t._v(" "),a("div",{staticClass:"language-ini extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ini"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[t._v("[env:nucleo]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("platform")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" ststm32")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("framework")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" mbed")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("board")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" nucleo_f072rb")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("upload_protocol")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" stlink")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Settings:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# - enable float formatting for printf, adding approx. 7 kB of bin file size")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# - C++11 to be able to define default values for struct members")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# - Use low speed internal clock (LSI) for RTC (no LSE crystal on PCB)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("build_flags")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")])]),t._v("\n    -Wl,-u_printf_float\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("    -std")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v("c++11")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("    -DMBED_CONF_TARGET_LSE_AVAILABLE")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v("0")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Custom Serial Monitor port")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# monitor_port = /dev/ttyUSB1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Custom Serial Monitor baud rate")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("monitor_baud")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" 115200")]),t._v("\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);